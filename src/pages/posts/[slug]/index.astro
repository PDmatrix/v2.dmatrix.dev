---
import { type CollectionEntry, getCollection } from "astro:content";
import Posts from "@layouts/Posts.astro";
import PostDetails from "@layouts/PostDetails.astro";
import getSortedPosts from "@utils/getSortedPosts";
import getPageNumbers from "@utils/getPageNumbers";
import getPostsWithRT from "@utils/getPostsWithRT";
import getPagination from "@utils/getPagination";

export interface Props {
  post: CollectionEntry<"blog">;
}

export async function getStaticPaths() {
  const posts = await getCollection("blog", ({ data }) => !data.draft);

  const postsWithRT = await getPostsWithRT(posts);

  const postResult = postsWithRT.map(post => ({
    params: { slug: post.slug },
    props: { post },
  }));

  const pagePaths = getPageNumbers(posts.length).map(pageNum => ({
    params: { slug: String(pageNum) },
  }));

  return [...postResult, ...pagePaths];
}

const { slug } = Astro.params;
const { post } = Astro.props;

const posts = await getCollection("blog");

const sortedPosts = await getSortedPosts(posts);

const pagination = getPagination({
  posts: sortedPosts,
  page: slug,
});

let nextPost = null;
let prevPost = null;
if (post) {
  const currentPostIndex = sortedPosts.findIndex(p => p.id === post.id);
  if (currentPostIndex !== sortedPosts.length - 1) {
    nextPost = sortedPosts[currentPostIndex + 1];
  }
  if (currentPostIndex !== 0) {
    prevPost = sortedPosts[currentPostIndex - 1];
  }
}
---

{
  post ? (
    <PostDetails post={post} nextPost={nextPost} prevPost={prevPost} />
  ) : (
    <Posts {...pagination} />
  )
}
